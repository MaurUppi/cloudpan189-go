name: Build and Test

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: ['1.22', '1.23']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go Problem Matcher
      run: echo "Skipping problem matcher to avoid configuration issues"
      
    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Run tests
      run: |
        echo "Running tests with race detector..."
        go test -ldflags="-checklinkname=0" -race -v -timeout=10m ./...
      timeout-minutes: 15
      
    - name: Run go vet
      run: go vet ./...
      
    - name: Build for multiple platforms
      run: |
        # 测试主要平台的构建
        echo "Building for Linux amd64..."
        GOOS=linux GOARCH=amd64 go build -ldflags="-checklinkname=0" -v .
        
        echo "Building for Windows amd64..."
        GOOS=windows GOARCH=amd64 go build -ldflags="-checklinkname=0" -v .
        
        echo "Building for macOS amd64..."
        GOOS=darwin GOARCH=amd64 go build -ldflags="-checklinkname=0" -v .
        
        echo "Building for macOS arm64..."
        GOOS=darwin GOARCH=arm64 go build -ldflags="-checklinkname=0" -v .

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=5m --disable=errcheck,staticcheck,ineffassign,unused

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        
    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: '-no-fail -fmt sarif -out results.sarif ./...'
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif